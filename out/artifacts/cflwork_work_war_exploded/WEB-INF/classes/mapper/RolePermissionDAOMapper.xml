<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="top.cflwork.dao.RolePermissionDAO">
    <resultMap id="rolePermissionMap" type="top.cflwork.vo.RolePermissionVo"></resultMap>
    <sql id="search">
        <if test="#{searchVal!=null} and #{searchVal!=''}">
            and (t.id like concat('%${searchVal}%'))
        </if>
    </sql>
    <select id="getById" resultMap="rolePermissionMap" parameterType="long">
        select  t.id , t.role_id , t.permission_id , t.create_time , t.is_active         from t_role_permission t where t.id = #{value}
    </select>
    <select id="listPage" resultMap="rolePermissionMap">
        select  t.id , t.role_id , t.permission_id , t.create_time , t.is_active  from t_role_permission t where t.company_id = #{companyId} <include refid="search"></include> order by t.create_time desc limit #{pageNo}, #{pageSize}
    </select>
    <select id="count" resultType="long">
        select count(t.id) from t_role_permission t where t.company_id = #{companyId}  <include refid="search"></include> order by t.create_time desc
    </select>

    <select id="listPages" resultMap="rolePermissionMap">
        select  t.id , t.role_id , t.permission_id , t.create_time , t.is_active         from t_role_permission t
        <where>
                            <if test="rolePermissionVo.id != null and rolePermissionVo.id != ''">
                    and t.id = #{rolePermissionVo.id}
                </if>
                            <if test="rolePermissionVo.roleId != null and rolePermissionVo.roleId != ''">
                    and t.role_id = #{rolePermissionVo.roleId}
                </if>
                            <if test="rolePermissionVo.permissionId != null and rolePermissionVo.permissionId != ''">
                    and t.permission_id = #{rolePermissionVo.permissionId}
                </if>
                            <if test="rolePermissionVo.createTime != null and rolePermissionVo.createTime != ''">
                    and t.create_time = #{rolePermissionVo.createTime}
                </if>
                            <if test="rolePermissionVo.isActive != null and rolePermissionVo.isActive != ''">
                    and t.is_active = #{rolePermissionVo.isActive}
                </if>
                        <include refid="search"></include>
        </where>
        <choose>
            <when test="rolePermissionVo.sort != null and rolePermissionVo.sort.trim() != ''">
                order by t.${rolePermissionVo.sort} t.${rolePermissionVo.order}
            </when>
            <otherwise>
                order by t.id desc
            </otherwise>
        </choose>
        <if test="pageQuery.pageNo != null and pageQuery.pageSize != null">
            limit #{pageQuery.pageNo}, #{pageQuery.pageSize}
        </if>
    </select>
    <select id="listAll" resultMap="rolePermissionMap">
        select * from t_role_permission where company_id=#{companyId}
    </select>
    <select id="counts" resultType="long">
        select count(t.id) from t_role_permission t
        <where>
                            <if test="rolePermissionVo.id != null and rolePermissionVo.id != ''">
                    and t.id = #{rolePermissionVo.id}
                </if>
                            <if test="rolePermissionVo.roleId != null and rolePermissionVo.roleId != ''">
                    and t.role_id = #{rolePermissionVo.roleId}
                </if>
                            <if test="rolePermissionVo.permissionId != null and rolePermissionVo.permissionId != ''">
                    and t.permission_id = #{rolePermissionVo.permissionId}
                </if>
                            <if test="rolePermissionVo.createTime != null and rolePermissionVo.createTime != ''">
                    and t.create_time = #{rolePermissionVo.createTime}
                </if>
                            <if test="rolePermissionVo.isActive != null and rolePermissionVo.isActive != ''">
                    and t.is_active = #{rolePermissionVo.isActive}
                </if>
                        <include refid="search"></include>
        </where>
        <choose>
            <when test="rolePermissionVo.sort != null and rolePermissionVo.sort.trim() != ''">
                order by t.${rolePermissionVo.sort} ${rolePermissionVo.order}
            </when>
            <otherwise>
                order by t.id desc
            </otherwise>
        </choose>
    </select>

    <insert id="save" parameterType="top.cflwork.vo.RolePermissionVo" useGeneratedKeys="true" keyProperty="id">
        insert into t_role_permission (
                                                                             role_id ,                                                                  permission_id ,                                                                  create_time ,                                                                  is_active                                   ) values (
                                                                            #{roleId}, 
                                                                #{permissionId}, 
                                                                #{createTime}, 
                                                                #{isActive}
                                    )
    </insert>

    <update id="update" parameterType="top.cflwork.vo.RolePermissionVo">
        update t_role_permission
        <set>
                                                                            <if test="roleId != null"> role_id  = #{roleId
                    }, </if>
                                                                <if test="permissionId != null"> permission_id  = #{permissionId
                    }, </if>
                                                                <if test="createTime != null"> create_time  = #{createTime
                    }, </if>
                                                                <if test="isActive != null"> is_active  = #{isActive
                    }</if>
                                    </set>
        where id = #{id}
    </update>
    <update id="updateStatus">
        update t_role_permission set is_active=#{status} where id=#{id}
    </update>
    <delete id="removeById" parameterType="long">
        delete from t_role_permission where id = #{id}
    </delete>
    <delete id="removeByRoleId" parameterType="long">
        delete from t_role_permission where role_id = #{id}
    </delete>
    <delete id="removeMany">
        delete from t_role_permission where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <select id="pageListByRoleId" resultType="long">
        select permission_id from t_role_permission
        <where>role_id = #{roleId}</where>
    </select>
    <insert id="batchSave">
        insert into t_role_permission(role_id, permission_id,is_active,create_time) values
        <foreach item="item" index="index" collection="list"
                 separator=",">
            (#{item.roleId},#{item.permissionId},0,now())
        </foreach>
    </insert>
</mapper>