<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="top.cflwork.dao.UserDAO">
	<resultMap type="userVo" id="userMap">
	</resultMap>
    <resultMap type="select2Vo" id="userIdAndNameMap">
    </resultMap>
	<sql id="Base_Column_List">id, email,phone,account_name,nickname,identity,realname,gender,age,address</sql>
	<select id="getByAccountPassword" resultType="userVo">
		<![CDATA[
			select * from t_user where password = #{password} and
			(email = #{account} or phone = #{account} or account_name = #{account} or realname=#{account} or nickname=#{account}) and is_active=0
		]]>
	</select>
	<select id="getById" resultMap="userMap" parameterType="long">
		select * from t_user where id = #{id}
	</select>
	<select id="findUserById" resultMap="userMap" parameterType="long">
		select nickname,account_name,phone,headicon from t_user where id = #{id}
	</select>
	<select id="checkLogin" resultType="int" parameterType="string">
		select count(*) from t_user where phone=#{account} or email=#{account} or account_name=#{account}
	</select>
	<select id="checkReg" resultType="int" parameterType="string">
		select  count(*) from t_user where phone = #{phone}
	</select>
	<select id="findByPhone" resultMap="userMap" parameterType="string">
		select * from t_user where phone = #{phone}
	</select>
	<delete id="removeById" parameterType="long">
		delete from t_user where id = #{id}
	</delete>
	<select id="listPage" resultMap="userMap">
		select * from t_user limit #{pageNo},#{pageSize}
	</select>
	<select id="listAll" resultMap="userMap">
		select * from t_user
	</select>
    <!--由于数据表的设计，这里本来需要指明属于哪一个总店长的-->
    <select id="getUserIdAndName" resultMap="userIdAndNameMap">
        select id,nickname as text from t_user
    </select>
	<select id="getUser" resultMap="userIdAndNameMap">
		select id,realname as text from t_user where company_id=#{companyId}
	</select>
	<select id="count" resultType="long">
		select count(*) from t_user
	</select>
	<select id="getPassword" resultType="string" parameterType="long">
		select password from t_user where id=#{id}
	</select>
    <select id="select2List" resultType="string" parameterType="long">
        select id,nickname from t_user
    </select>
	<insert id="save" parameterType="userVo">
		<selectKey keyProperty="id" order="AFTER" resultType="long">
			SELECT LAST_INSERT_ID() as id
		</selectKey>
		insert into t_user (phone,password,nickname,gender,is_active,headicon,company_id,`realname`,`identity`) values ( #{phone},#{password},#{nickname},#{gender},#{isActive},#{headicon},#{companyId},#{realname},#{identity})
	</insert>
	<update id="updateStatus">
		update t_user set is_active=#{status} where id=#{id}
	</update>
	<update id="updatePwd">
		update t_user set password=#{pwd} where id=#{id}
	</update>
	<update id="updatePhone">
		update t_user set phone=#{phone} where id=#{id}
	</update>
	<update id="updateHeadIcon">
		update t_user set headicon=#{headicon} where id=#{id}
	</update>
	<select id="landlordCount" resultType="int" parameterType="string">
		select count(*) from t_user u,t_role r,t_user_role t where u.id=t.user_id and r.id=t.role_id and r.id=(select id from t_role where title=#{title})
	</select>
	<select id="landlordListPage" resultMap="userMap">
		select u.* from t_user u,t_role r,t_user_role t where u.id=t.user_id and r.id=t.role_id and r.id=(select id from t_role where title=#{title}) order by u.create_time desc limit #{pageQuery.pageNo},#{pageQuery.pageSize}
	</select>
	<update id="update">
		update t_user set
			email = #{email},
			nickname = #{nickname},
			identity = #{identity},
			realname = #{realname},
			gender = #{gender},
			age = #{age},
			address = #{address},
			qq = #{qq},
			wechat = #{wechat},
			description = #{description}
		where id = #{id}
	</update>
</mapper>